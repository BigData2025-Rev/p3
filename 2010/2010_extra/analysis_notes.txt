Everything was done through PySpark in terminal

Before using Spark add file to correct location:
chmod +rwx 2010_combine.orc
hdfs dfs -put 2010_combine.orc /user/hive/warehouse

All columns as given to me by Spark with survey data result columns changed to ints:

FILEID: string, STUSAB: string, SUMLEV: string, GEOCOMP: string, CHARITER: string, CIFSN: string, LOGRECNO: string, REGION: string, DIVISION: string, STATE: string, COUNTY: string, COUNTYCC: string, COUNTYSC: string, COUSUB: string, COUSUBCC: string, COUSUBSC: string, PLACE: string, PLACECC: string, PLACESC: string, TRACT: string, BLKGRP: string, BLOCK: string, IUC: string, CONCIT: string, CONCITCC: string, CONCITSC: string, AIANHH: string, AIANHHFP: string, AIANHHCC: string, AIHHTLI: string, AITSCE: string, AITS: string, AITSCC: string, TTRACT: string, TBLKGRP: string, ANRC: string, ANRCCC: string, CBSA: string, CBSASC: string, METDIV: string, CSA: string, NECTA: string, NECTASC: string, NECTADIV: string, CNECTA: string, CBSAPCI: string, NECTAPCI: string, UA: string, UASC: string, UATYPE: string, UR: string, CD: string, SLDU: string, SLDL: string, VTD: string, VTDI: string, RESERVE2: string, ZCTA5: string, SUBMCD: string, SUBMCDCC: string, SDELM: string, SDSEC: string, SDUNI: string, AREALAND: string, AREAWATR: string, NAME: string, FUNCSTAT: string, GCUNI: string, POP100: string, HU100: string, INTPTLAT: string, INTPTLON: string, LSADC: string, PARTFLAG: string, RESERVE3: string, UGA: string, STATENS: string, COUNTYNS: string, COUSUBNS: string, PLACENS: string, CONCITNS: string, AIANHHNS: string, AITSNS: string, ANRCNS: string, SUBMCDNS: string, CD113: string, CD114: string, CD115: string, SLDU2: string, SLDU3: string, SLDU4: string, SLDL2: string, SLDL3: string, SLDL4: string, AIANHHSC: string, CSASC: string, CNECTASC: string, MEMI: string, NMEMI: string, PUMA: string, RESERVED: string, P0010001: integer, P0010002: integer, P0010003: integer, P0010004: integer, P0010005: integer, P0010006: integer, P0010007: integer, P0010008: integer, P0010009: integer, P0010010: integer, P0010011: integer, P0010012: integer, P0010013: integer, P0010014: integer, P0010015: integer, P0010016: integer, P0010017: integer, P0010018: integer, P0010019: integer, P0010020: integer, P0010021: integer, P0010022: integer, P0010023: integer, P0010024: integer, P0010025: integer, P0010026: integer, P0010027: integer, P0010028: integer, P0010029: integer, P0010030: integer, P0010031: integer, P0010032: integer, P0010033: integer, P0010034: integer, P0010035: integer, P0010036: integer, P0010037: integer, P0010038: integer, P0010039: integer, P0010040: integer, P0010041: integer, P0010042: integer, P0010043: integer, P0010044: integer, P0010045: integer, P0010046: integer, P0010047: integer, P0010048: integer, P0010049: integer, P0010050: integer, P0010051: integer, P0010052: integer, P0010053: integer, P0010054: integer, P0010055: integer, P0010056: integer, P0010057: integer, P0010058: integer, P0010059: integer, P0010060: integer, P0010061: integer, P0010062: integer, P0010063: integer, P0010064: integer, P0010065: integer, P0010066: integer, P0010067: integer, P0010068: integer, P0010069: integer, P0010070: integer, P0010071: integer, P0020001: integer, P0020002: integer, P0020003: integer, P0020004: integer, P0020005: integer, P0020006: integer, P0020007: integer, P0020008: integer, P0020009: integer, P0020010: integer, P0020011: integer, P0020012: integer, P0020013: integer, P0020014: integer, P0020015: integer, P0020016: integer, P0020017: integer, P0020018: integer, P0020019: integer, P0020020: integer, P0020021: integer, P0020022: integer, P0020023: integer, P0020024: integer, P0020025: integer, P0020026: integer, P0020027: integer, P0020028: integer, P0020029: integer, P0020030: integer, P0020031: integer, P0020032: integer, P0020033: integer, P0020034: integer, P0020035: integer, P0020036: integer, P0020037: integer, P0020038: integer, P0020039: integer, P0020040: integer, P0020041: integer, P0020042: integer, P0020043: integer, P0020044: integer, P0020045: integer, P0020046: integer, P0020047: integer, P0020048: integer, P0020049: integer, P0020050: integer, P0020051: integer, P0020052: integer, P0020053: integer, P0020054: integer, P0020055: integer, P0020056: integer, P0020057: integer, P0020058: integer, P0020059: integer, P0020060: integer, P0020061: integer, P0020062: integer, P0020063: integer, P0020064: integer, P0020065: integer, P0020066: integer, P0020067: integer, P0020068: integer, P0020069: integer, P0020070: integer, P0020071: integer, P0020072: integer, P0020073: integer, P0030001: integer, P0030002: integer, P0030003: integer, P0030004: integer, P0030005: integer, P0030006: integer, P0030007: integer, P0030008: integer, P0030009: integer, P0030010: integer, P0030011: integer, P0030012: integer, P0030013: integer, P0030014: integer, P0030015: integer, P0030016: integer, P0030017: integer, P0030018: integer, P0030019: integer, P0030020: integer, P0030021: integer, P0030022: integer, P0030023: integer, P0030024: integer, P0030025: integer, P0030026: integer, P0030027: integer, P0030028: integer, P0030029: integer, P0030030: integer, P0030031: integer, P0030032: integer, P0030033: integer, P0030034: integer, P0030035: integer, P0030036: integer, P0030037: integer, P0030038: integer, P0030039: integer, P0030040: integer, P0030041: integer, P0030042: integer, P0030043: integer, P0030044: integer, P0030045: integer, P0030046: integer, P0030047: integer, P0030048: integer, P0030049: integer, P0030050: integer, P0030051: integer, P0030052: integer, P0030053: integer, P0030054: integer, P0030055: integer, P0030056: integer, P0030057: integer, P0030058: integer, P0030059: integer, P0030060: integer, P0030061: integer, P0030062: integer, P0030063: integer, P0030064: integer, P0030065: integer, P0030066: integer, P0030067: integer, P0030068: integer, P0030069: integer, P0030070: integer, P0030071: integer, P0040001: integer, P0040002: integer, P0040003: integer, P0040004: integer, P0040005: integer, P0040006: integer, P0040007: integer, P0040008: integer, P0040009: integer, P0040010: integer, P0040011: integer, P0040012: integer, P0040013: integer, P0040014: integer, P0040015: integer, P0040016: integer, P0040017: integer, P0040018: integer, P0040019: integer, P0040020: integer, P0040021: integer, P0040022: integer, P0040023: integer, P0040024: integer, P0040025: integer, P0040026: integer, P0040027: integer, P0040028: integer, P0040029: integer, P0040030: integer, P0040031: integer, P0040032: integer, P0040033: integer, P0040034: integer, P0040035: integer, P0040036: integer, P0040037: integer, P0040038: integer, P0040039: integer, P0040040: integer, P0040041: integer, P0040042: integer, P0040043: integer, P0040044: integer, P0040045: integer, P0040046: integer, P0040047: integer, P0040048: integer, P0040049: integer, P0040050: integer, P0040051: integer, P0040052: integer, P0040053: integer, P0040054: integer, P0040055: integer, P0040056: integer, P0040057: integer, P0040058: integer, P0040059: integer, P0040060: integer, P0040061: integer, P0040062: integer, P0040063: integer, P0040064: integer, P0040065: integer, P0040066: integer, P0040067: integer, P0040068: integer, P0040069: integer, P0040070: integer, P0040071: integer, P0040072: integer, P0040073: integer, H0010001: integer, H0010002: integer, H0010003: integer

Read file into dataframe:
df = spark.read.orc("/user/hive/warehouse/2010_combine.orc")

Putting all non-survey result columns into a select statement:

df.FILEID, df.STUSAB, df.SUMLEV, df.GEOCOMP, df.CHARITER, df.CIFSN, df.LOGRECNO, df.REGION, df.DIVISION, df.STATE, df.COUNTY, df.COUNTYCC, df.COUNTYSC, df.COUSUB, df.COUSUBCC, df.COUSUBSC, df.PLACE, df.PLACECC, df.PLACESC, df.TRACT, df.BLKGRP, df.BLOCK, df.IUC, df.CONCIT, df.CONCITCC, df.CONCITSC, df.AIANHH, df.AIANHHFP, df.AIANHHCC, df.AIHHTLI, df.AITSCE, df.AITS, df.AITSCC, df.TTRACT, df.TBLKGRP, df.ANRC, df.ANRCCC, df.CBSA, df.CBSASC, df.METDIV, df.CSA, df.NECTA, df.NECTASC, df.NECTADIV, df.CNECTA, df.CBSAPCI, df.NECTAPCI, df.UA, df.UASC, df.UATYPE, df.UR, df.CD, df.SLDU, df.SLDL, df.VTD, df.VTDI, df.RESERVE2, df.ZCTA5, df.SUBMCD, df.SUBMCDCC, df.SDELM, df.SDSEC, df.SDUNI, df.AREALAND, df.AREAWATR, df.NAME, df.FUNCSTAT, df.GCUNI, df.POP100, df.HU100, df.INTPTLAT, df.INTPTLON, df.LSADC, df.PARTFLAG, df.RESERVE3, df.UGA, df.STATENS, df.COUNTYNS, df.COUSUBNS, df.PLACENS, df.CONCITNS, df.AIANHHNS, df.AITSNS, df.ANRCNS, df.SUBMCDNS, df.CD113, df.CD114, df.CD115, df.SLDU2, df.SLDU3, df.SLDU4, df.SLDL2, df.SLDL3, df.SLDL4, df.AIANHHSC, df.CSASC, df.CNECTASC, df.MEMI, df.NMEMI, df.PUMA, df.RESERVED












Power BI notes:

INTPTLAT and INTPTLON are latitude and longitude vals. In table view select these columns one at a time then under Columns Tools change the Data Category to either latitude or longitude. Now you can use these vals in the Map visualization.

STUSAB is the all caps state abbreviation 

Its easier to list the columns that should be kept rather than removed. But before I stopped counting the columns that seemingly have no purpose for our data are: FILEID, GEOCOMP, CHARITER, CIFSN, REGION, DIVISION, COUNTYCC, COUNTYSC, PLACESC, IUC, COUNCII, COUNCITSC, AITSCE, AITS, ANRC, ANRCCC, CBSASC, METDIV
